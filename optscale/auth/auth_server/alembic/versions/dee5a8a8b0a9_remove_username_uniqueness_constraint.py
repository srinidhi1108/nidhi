"""Remove username uniqueness constraint

Revision ID: dee5a8a8b0a9
Revises: 59d180a33635
Create Date: 2020-03-24 17:47:40.468154

"""
from alembic import op
import datetime
from sqlalchemy.orm import Session
from sqlalchemy.sql import table, column, and_
from sqlalchemy import update, String, select, Integer, func


# revision identifiers, used by Alembic.
revision = 'dee5a8a8b0a9'
down_revision = '3bd5237d912e'
init_migration_name = '22e57b7a4186_name_scope_unique_in_user'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_name_scope_type_deleted', table_name='user')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        user_table = table('user',
                           column('id', String(36)),
                           column('display_name', String(64)),
                           column('scope_id', String(36)),
                           column('type_id', Integer),
                           column('deleted_at', Integer)
                           )
        inner_stmt = select(
            [user_table.c.display_name, user_table.c.scope_id,
             user_table.c.type_id, func.count('*').label('cnt')]
        ).group_by(user_table.c.display_name, user_table.c.scope_id,
                   user_table.c.type_id).alias('inner_stmt')
        outer_stmt = select(
            [inner_stmt.c.display_name, inner_stmt.c.scope_id,
             inner_stmt.c.type_id, inner_stmt.c.cnt]
        ).select_from(inner_stmt).where(inner_stmt.c.cnt > 1)
        for duplicates in session.execute(outer_stmt):
            stmt = select([user_table]).where(and_(
                user_table.c.display_name == duplicates['display_name'],
                user_table.c.scope_id == duplicates['scope_id'],
                user_table.c.type_id == duplicates['type_id'],
                user_table.c.deleted_at == 0))
            for duplicate in session.execute(stmt):
                new_name = '%s_%f' % (
                    duplicate['display_name'],
                    datetime.datetime.utcnow().timestamp())
                upd_stmt = update(user_table).values(
                    display_name=new_name
                ).where(user_table.c.id == duplicate['id'])
                session.execute(upd_stmt)
        session.commit()
    finally:
        session.close()
    op.create_index(
        'idx_user_name_scope_type_deleted', 'user',
        ['display_name', 'scope_id', 'type_id', 'deleted_at'], unique=True
    )
    # ### end Alembic commands ###
