""""removed_backup_lock"

Revision ID: f1cae25c9c09
Revises: 41ac2aeac093
Create Date: 2019-03-25 13:26:52.730728

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy.sql import table, column
from sqlalchemy import String, select, false

# revision identifiers, used by Alembic.
revision = 'f1cae25c9c09'
down_revision = '4fba6d4f131c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('backup', 'lock_owner')
    op.drop_column('backup', 'locked')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('backup', sa.Column('lock_owner', sa.String(length=256),
                                      nullable=True))
    op.add_column('backup', sa.Column('locked', sa.Boolean(), nullable=True,
                                      server_default=false()))
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        failover_table = table('failover', column('backup_id', String(36)),
                               column('deleted_at', sa.Integer()))

        backup_table = table('backup', column('id', String(36)),
                             column('locked', sa.Boolean()))
        stmt = select([failover_table]).where(failover_table.c.deleted_at == 0)
        failovers = session.execute(stmt)
        backup_ids = list(map(lambda x: x.backup_id, failovers))
        update_backups = sa.update(backup_table).values(locked=True).where(
            backup_table.c.id.in_(backup_ids))
        session.execute(update_backups)
        session.commit()
    finally:
        session.close()
    # ### end Alembic commands ###
