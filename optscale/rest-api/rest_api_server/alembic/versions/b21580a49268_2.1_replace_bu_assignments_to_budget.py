""""2.1 replace bu assignments to budget assignments in auth"

Revision ID: b21580a49268
Revises: 63ddff648c48
Create Date: 2020-09-04 16:53:08.879781

"""
import datetime
import logging
import os
import time

import config_client.client
from alembic import op
import sqlalchemy as sa
from sqlalchemy import (table, column, update, delete, select, insert, and_,
                        create_engine)
from sqlalchemy.orm import Session, sessionmaker

# revision identifiers, used by Alembic.
revision = 'b21580a49268'
down_revision = '63ddff648c48'
branch_labels = None
depends_on = None


DEFAULT_ETCD_HOST = 'etcd-client'
DEFAULT_ETCD_PORT = 80
DELAY_SECS = 10

LOG = logging.getLogger(__name__)


def get_parent_budget_type_ids(session):
    table_ = table('type',
                   column('id', sa.String(36)),
                   column('parent_id', sa.String(36)),
                   column('deleted_at', sa.Integer),
                   column('name', sa.String(256)))
    select_stmt = select(
        [table_.c.id, table_.c.parent_id, table_.c.name]
    ).where(
        table_.c.deleted_at == 0
    ).order_by(table_.c.id)
    result = session.execute(select_stmt).fetchall()
    root_type_id = [type_id for type_id, parent_id, _ in result
                    if parent_id is None][0]
    partner_type_id = [type_id for type_id, parent_id, _ in result
                       if parent_id == root_type_id][0]
    budget_type_id = [type_id for type_id, parent_id, _ in result
                      if parent_id == partner_type_id][0]
    return partner_type_id, budget_type_id


def _get_etcd_config_client():
    etcd_host = os.environ.get('HX_ETCD_HOST', DEFAULT_ETCD_HOST)
    etcd_port = os.environ.get('HX_ETCD_PORT', DEFAULT_ETCD_PORT)
    config_cl = config_client.client.Client(host=etcd_host, port=int(etcd_port))
    return config_cl


def get_auth_db_url():
    config_cl = _get_etcd_config_client()
    user, password, host, db = config_cl.auth_db_params()
    auth_db_url = 'mysql+mysqlconnector://%s:%s@%s/%s' % (
        user, password, host, db)
    return auth_db_url


def get_session_to_auth_db():
    auth_url = get_auth_db_url()
    engine = create_engine(auth_url)
    session = sessionmaker(bind=engine)()
    return session


def get_map_sub_bu_budget(session, reverse_map=False):
    table_ = table('partner',
                   column('id', sa.String(36)),
                   column('parent_id', sa.String(36)),
                   column('budget_id', sa.String(36)))
    select_stmt = select(
        [table_.c.id, table_.c.parent_id, table_.c.budget_id]
    ).where(
        table_.c.parent_id.isnot(None)
    )
    result = session.execute(select_stmt)
    if not reverse_map:
        sub_bu_budget_map = {bu_id: budget_id for bu_id, _, budget_id in result}
    else:
        sub_bu_budget_map = {budget_id: bu_id for bu_id, _, budget_id in result}
    return sub_bu_budget_map


def replace_bu_ids_to_budget_ids(auth_session, sub_bu_budget_map,
                                 source_type_id, target_type_id):
    assignment_table = table(
        'assignment',
        column('id', sa.String(36)),
        column('type_id', sa.Integer),
        column('resource_id', sa.String(36))
    )
    select_stmt = select(
        [assignment_table.c.id, assignment_table.c.type_id,
         assignment_table.c.resource_id]
    ).where(
        and_(
            assignment_table.c.type_id == source_type_id,
            assignment_table.c.resource_id.in_(sub_bu_budget_map.keys())
        )
    )
    result = auth_session.execute(select_stmt)
    for id_, _, resource_id in result:
        target_budget_id = sub_bu_budget_map.get(resource_id)
        update_stmt = update(
            assignment_table
        ).values(
            resource_id=target_budget_id,
            type_id=target_type_id
        ).where(
            assignment_table.c.id == id_
        )
        auth_session.execute(update_stmt)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    rest_session = Session(bind=bind)
    auth_session = get_session_to_auth_db()
    partner_type_id, budget_type_id = get_parent_budget_type_ids(auth_session)
    sub_bu_budget_map = get_map_sub_bu_budget(rest_session)
    replace_bu_ids_to_budget_ids(auth_session,
                                 sub_bu_budget_map=sub_bu_budget_map,
                                 source_type_id=partner_type_id,
                                 target_type_id=budget_type_id)
    try:
        auth_session.commit()
    finally:
        rest_session.close()
        auth_session.close()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    rest_session = Session(bind=bind)
    auth_session = get_session_to_auth_db()
    partner_type_id, budget_type_id = get_parent_budget_type_ids(auth_session)
    sub_bu_budget_map = get_map_sub_bu_budget(rest_session, reverse_map=True)
    replace_bu_ids_to_budget_ids(auth_session,
                                 sub_bu_budget_map=sub_bu_budget_map,
                                 source_type_id=budget_type_id,
                                 target_type_id=partner_type_id)
    try:
        auth_session.commit()
    finally:
        rest_session.close()
        auth_session.close()
    # ### end Alembic commands ###
