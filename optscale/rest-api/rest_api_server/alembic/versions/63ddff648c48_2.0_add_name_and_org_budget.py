""""2.0 add name and org in budget table"

Revision ID: 63ddff648c48
Revises: e0cde169e379
Create Date: 2020-09-02 14:24:03.733274

"""


from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, update, select, or_
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = '63ddff648c48'
down_revision = 'a34d9c7b1d96'
branch_labels = None
depends_on = None


def delete_budgets_without_name(session):
    table_ = table('budget',
                   column('id', sa.String(36)),
                   column('name', sa.String(256)),
                   column('type',
                          sa.Enum('PROJECT', 'BUSINESS_UNIT', 'EMPLOYEE')),
                   column('organization_id', sa.String(36)))
    delete_stmt = table_.delete().where(
        or_(
            table_.c.name.is_(None),
            table_.c.organization_id.is_(None)
        )

    )
    session.execute(delete_stmt)


def get_bu_tree(session, org_id):
    table_ = table('partner',
                   column('id', sa.String(36)),
                   column('name', sa.String(256)),
                   column('budget_id', sa.String(36)),
                   column('parent_id', sa.String(36)))
    hierarchy = select(
        [table_.c.id, table_.c.name, table_.c.budget_id, table_.c.parent_id]
    ).where(
        table_.c.id == org_id
    ).cte(recursive=True)
    hierarchy_alias = hierarchy.alias()
    table_alias = table_.alias()
    hierarchy = hierarchy.union_all(
        select(
            [table_alias.c.id, table_alias.c.name,
             table_alias.c.budget_id, table_alias.c.parent_id]
        ).where(
            table_alias.c.parent_id == hierarchy_alias.c.id
        )
    )
    stmt = select(
        [hierarchy.c.id, hierarchy.c.name, hierarchy.c.budget_id,
         hierarchy.c.parent_id]
    )
    result = session.execute(stmt).fetchall()
    return result


def update_budget_names_org_ids(session, org_id, units):
    table_ = table('budget',
                   column('id', sa.String(36)),
                   column('name', sa.String(256)),
                   column('organization_id', sa.String(36)))
    for id_, name, budget_id, parent_id in units:
        upd_stmt = update(
            table_
        ).values(
            name=name,
            organization_id=org_id
        ).where(table_.c.id == budget_id)
        session.execute(upd_stmt)


def add_names_and_org_id_for_budgets(session):
    table_ = table('partner',
                   column('id', sa.String(36)),
                   column('parent_id', sa.String(36)))
    select_stmt = select([table_.c.id]).where(table_.c.parent_id.is_(None))
    result = session.execute(select_stmt)
    for org_id, in result:
        units = get_bu_tree(session, org_id)
        update_budget_names_org_ids(session, org_id, units)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('budget', sa.Column('name', sa.String(length=256),
                                      nullable=True))
    op.add_column('budget', sa.Column('organization_id', sa.String(36),
                                      nullable=True))
    bind = op.get_bind()
    rest_session = Session(bind=bind)
    add_names_and_org_id_for_budgets(rest_session)
    delete_budgets_without_name(rest_session)
    try:
        rest_session.commit()
    finally:
        rest_session.close()
    op.alter_column('budget', 'name',
                    existing_type=sa.String(256), nullable=False)
    op.alter_column('budget', 'organization_id',
                    existing_type=sa.String(36), nullable=False)
    op.create_foreign_key('budget_organization_fk', 'budget', 'partner',
                          ['organization_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('budget_organization_fk', 'budget', type_='foreignkey')
    op.drop_column('budget', 'organization_id')
    op.drop_column('budget', 'name')
    # ### end Alembic commands ###
