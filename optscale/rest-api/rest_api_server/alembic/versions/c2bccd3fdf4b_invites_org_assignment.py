""""invites_org_assignment"

Revision ID: c2bccd3fdf4b
Revises: 5537437a5494
Create Date: 2021-03-05 06:36:28.210377

"""
import json
import sqlalchemy as sa
import uuid
from alembic import op
from sqlalchemy.orm import Session
from sqlalchemy.sql import table, column
from sqlalchemy import select, String, insert, update


# revision identifiers, used by Alembic.
revision = 'c2bccd3fdf4b'
down_revision = '5537437a5494'
branch_labels = None
depends_on = None


def get_scopes_map(session, scope_ids):
    scopes_map = {'organization': {}, 'budget': {}}
    org_table = table('organization',
                      column('id',  String()),
                      column('deleted_at', sa.Integer())
                      )
    organizations = session.execute(
        select([org_table]).where(org_table.c.id.in_(scope_ids))
    )
    scopes_map['organization'].update({org.id: org for org in organizations})

    budget_table = table('budget',
                         column('id',  String()),
                         column('deleted_at', sa.Integer()),
                         column('organization_id', String()),
                         )
    budgets = session.execute(
        select([budget_table]).where(budget_table.c.id.in_(scope_ids))
    )
    scopes_map['budget'].update({b.id: b for b in budgets})
    return scopes_map


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        inv_table = table('invite',
                          column('id', String(36)),
                          column('deleted_at', sa.Integer()),
                          column('meta', sa.TEXT()))
        invites = session.execute(
            select([inv_table]).where(inv_table.c.deleted_at == 0)
        )
        inv_assignment_table = table(
            'invite_assignment', column('id', String(36)),
            column('invite_id', String(36)), column('scope_id', String(36)),
            column('scope_type', sa.Enum('ORGANIZATION', 'BUDGET')),
            column('purpose', sa.Enum(
                'optscale_member', 'optscale_engineer', 'optscale_manager')),
            column('deleted_at', sa.Integer())
        )
        invites_map = {x.id: x for x in invites}
        inv_ids = list(invites_map.keys())
        assignments = session.execute(
            select([inv_assignment_table]).where(
                inv_assignment_table.c.invite_id.in_(inv_ids))
        )
        inv_assignments_map = {}
        for ass in assignments:
            if not inv_assignments_map.get(ass.invite_id):
                inv_assignments_map[ass.invite_id] = []
            inv_assignments_map[ass.invite_id].append(ass)
        for invite_id, assignments in inv_assignments_map.items():
            invite_scopes = list(map(lambda x: x.scope_id, assignments))
            scopes_map = get_scopes_map(session, invite_scopes)
            invited_org_ids = list(map(lambda x: x.organization_id,
                                       scopes_map['budget'].values()))
            org_to_add_ids = set(filter(
                lambda x: x not in scopes_map['organization'].keys(),
                invited_org_ids))
            invite = invites_map[invite_id]
            inv_meta = json.loads(invite.meta)
            org_name = inv_meta.get('organization')
            for org_id in org_to_add_ids:
                inv_meta['scope_names'].update({
                    org_id: org_name
                })
                ins_stmt = insert(inv_assignment_table).values(
                    id=str(uuid.uuid4()),
                    deleted_at=0,
                    invite_id=invite_id,
                    scope_id=org_id,
                    scope_type='ORGANIZATION',
                    purpose='optscale_member'
                )
                session.execute(ins_stmt)
            upd_invite = update(inv_table).values(
                meta=json.dumps(inv_meta)).where(
                inv_table.c.id == invite_id)
            session.execute(upd_invite)
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
