""""failback_download"

Revision ID: ea57c92cb215
Revises: ff5f881f5088
Create Date: 2019-05-31 08:52:05.906813

"""
import uuid
import sqlalchemy as sa
from datetime import datetime
from alembic import op
from cryptography.fernet import Fernet
from sqlalchemy.orm import Session
from sqlalchemy.sql import table, column
from sqlalchemy import (Integer, insert, TEXT, LargeBinary, and_, select,
                        String, update)


# revision identifiers, used by Alembic.
revision = 'ea57c92cb215'
down_revision = 'e802a0a76f8f'
branch_labels = None
depends_on = None

old_fb_states = sa.Enum('INCOMPLETE', 'IDLE', 'READY', 'RUNNING',
                        'SYNCHRONIZED', 'ERROR', 'CANCEL', 'CANCELLED',
                        'CANCELLING', 'PREPARING')
new_fb_states = sa.Enum('INCOMPLETE', 'IDLE', 'READY', 'RUNNING',
                        'SYNCHRONIZED', 'ERROR', 'CANCEL', 'CANCELLED',
                        'CANCELLING', 'PREPARING', 'DELETING')


def _encrypt_password(password, salt):
    key = Fernet.generate_key()
    fernet = Fernet(key)
    return fernet.encrypt((password + salt).encode())


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('failback', sa.Column('failback_type', sa.Enum(
        'FAILBACK', 'DOWNLOAD', name='failback_type'), nullable=False,
                                        server_default='FAILBACK'))
    op.alter_column('failback', 'state',
                    existing_type=new_fb_states, nullable=False)
    op.alter_column('failback', 'vsphere_credential_id',
                    existing_type=sa.String(length=36), nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        fb_table = sa.sql.table('failback', column('id', String(36)),
                                column('state', new_fb_states),
                                column('customer_id', String(36)),
                                column('vsphere_credential_id', String(36)))
        op.execute(fb_table.update().where(fb_table.c.state.in_(
            ['DELETING'])).values(state='ERROR'))
        failbacks = session.execute(select([fb_table]).where(
            fb_table.c.vsphere_credential_id.is_(None)))
        customer_ids = list(set(map(lambda x: x['customer_id'], failbacks)))
        vsphere_credential_table = table(
            'vsphere_credential', column('id', String(36)),
            column('name', Integer), column('customer_id', String(36)),
            column('description', TEXT), column('endpoint', String(256)),
            column('username', String(256)), column('password', LargeBinary),
            column('salt', String(36)), column('deleted_at', Integer))
        for customer_id in customer_ids:
            password = 'my-migration-pass'
            salt = str(uuid.uuid4())
            password = _encrypt_password(password, salt)
            vsphere_credential_id = str(uuid.uuid4())
            ins_stmt = insert(vsphere_credential_table).values(
                id=vsphere_credential_id,
                name='fake_%s' % vsphere_credential_id,
                customer_id=customer_id,
                description='fake',
                endpoint='127.0.0.1',
                username='fake',
                password=password,
                salt=salt,
                deleted_at=int(datetime.utcnow().timestamp()))
            session.execute(ins_stmt)
            upd_stmt = update(fb_table).values(
                vsphere_credential_id=vsphere_credential_id).where(
                and_(
                    fb_table.c.vsphere_credential_id.is_(None),
                    fb_table.c.customer_id == customer_id)
                )
            session.execute(upd_stmt)
            session.commit()
    finally:
        session.close()
    op.drop_constraint('failback_ibfk_vscred', 'failback', type_='foreignkey')
    op.alter_column('failback', 'vsphere_credential_id',
                    existing_type=sa.String(length=36), nullable=False)
    op.create_foreign_key(
        'failback_ibfk_vscred', 'failback', 'vsphere_credential',
        ['vsphere_credential_id'], ['id'])
    op.drop_column('failback', 'failback_type')
    op.alter_column('failback', 'state',
                    existing_type=old_fb_states, nullable=False)
    # ### end Alembic commands ###
