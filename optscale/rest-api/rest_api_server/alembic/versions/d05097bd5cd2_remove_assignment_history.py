""""remove_assignment_history"

Revision ID: d05097bd5cd2
Revises: bdd6233c7aab
Create Date: 2020-11-19 06:01:09.305436

"""
import os
import uuid
from alembic import op
import sqlalchemy as sa
from datetime import datetime
from config_client.client import Client as EtcdClient
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import declarative_base, declared_attr
from pymongo import MongoClient, UpdateMany


# revision identifiers, used by Alembic.
revision = 'd05097bd5cd2'
down_revision = 'a816cc32e6e3'
branch_labels = None
depends_on = None
DEFAULT_ETCD_HOST = 'etcd-client'
DEFAULT_ETCD_PORT = 80


class Base(object):
    @declared_attr
    # pylint: disable=E0213
    def __tablename__(cls):
        # pylint: disable=E1101
        return cls.__name__.lower()

    def to_dict(self):
        return {c.key: getattr(self, c.key)
                for c in sa.inspect(self).mapper.column_attrs}


Base = declarative_base(cls=Base)


def now_timestamp():
    return int(datetime.utcnow().timestamp())


def gen_id():
    return str(uuid.uuid4())


class ResourceAssignmentHistory(Base):
    __tablename__ = 'resource_assignment_history'

    id = sa.Column(sa.String(36), primary_key=True, default=gen_id)
    deleted_at = sa.Column(sa.Integer, default=0, nullable=False)
    resource_id = sa.Column(sa.String(36), nullable=False)
    budget_id = sa.Column(sa.String(36), nullable=False)
    owner_id = sa.Column(sa.String(36), nullable=False)
    created_at = sa.Column(sa.Integer, default=now_timestamp, nullable=False)


def _get_etcd_config_client():
    etcd_host = os.environ.get('HX_ETCD_HOST', DEFAULT_ETCD_HOST)
    etcd_port = os.environ.get('HX_ETCD_PORT', DEFAULT_ETCD_PORT)
    config_cl = EtcdClient(host=etcd_host, port=int(etcd_port))
    return config_cl


def _get_restapi_mongo():
    config_cl = _get_etcd_config_client()
    mongo_params = config_cl.mongo_params()
    mongo_conn_string = "mongodb://%s:%s@%s:%s" % mongo_params[:-1]
    mongo_client = MongoClient(mongo_conn_string)
    return mongo_client.restapi


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    restapi_mongo = _get_restapi_mongo()
    pipeline = [
        {
            "$match": {
                "$and": [
                    {
                        "employee_id": {
                            "$exists": True,
                            "$ne": None
                        }
                    },
                    {
                        "budget_id": {
                            "$exists": True,
                            "$ne": None
                        }
                    },
                ]
            }
        }
    ]
    resources = restapi_mongo.resources.aggregate(pipeline)
    updates = {}
    for resource in resources:
        updates.update({
            resource['_id']: {
                'owner_id': resource['employee_id'],
                'budget_id': resource['budget_id']
            }
        })
    if updates:
        restapi_mongo.expenses.bulk_write([
            UpdateMany(
                filter={
                    'resource_id': k
                },
                update={
                    '$set': v,
                }
            ) for k, v in updates.items()
        ])
    op.drop_index(op.f('ix_resource_assignment_history_resource_id'),
                  table_name='resource_assignment_history')
    op.drop_table('resource_assignment_history')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'resource_assignment_history',
        sa.Column('deleted_at', sa.Integer(), nullable=False),
        sa.Column('id', sa.String(36), nullable=False),
        sa.Column('resource_id', sa.String(36), nullable=False),
        sa.Column('budget_id', sa.String(36), nullable=False),
        sa.Column('owner_id', sa.String(36), nullable=False),
        sa.Column('created_at', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['budget_id'], ['budget.id'], ),
        sa.ForeignKeyConstraint(['owner_id'], ['employee.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resource_assignment_history_resource_id'),
                    'resource_assignment_history', ['resource_id'],
                    unique=False)
    pipeline = [
        {
            "$match": {
                "$and": [
                    {
                        "owner_id": {
                            "$exists": True,
                            "$ne": None
                        }
                    },
                    {
                        "budget_id": {
                            "$exists": True,
                            "$ne": None
                        }
                    },
                ]
            }
        },
        {
            '$group': {
                '_id': {
                    'resource_id': '$resource_id',
                },
                'resource_id': {'$first': '$resource_id'},
                'created_at': {"$min": "$date"},
                'owner_id': {'$first': '$owner_id'},
                'budget_id': {'$first': '$budget_id'},
            }
        }
    ]
    restapi_mongo = _get_restapi_mongo()
    expenses = restapi_mongo.expenses.aggregate(pipeline)
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        for ex in expenses:
            ex.pop('_id', None)
            ex['created_at'] = int(ex['created_at'].timestamp())
            session.add(ResourceAssignmentHistory(**ex))
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()
    # ### end Alembic commands ###
