""""Moved tags into separate table"

Revision ID: c766962faf4f
Revises: 325c35031a08
Create Date: 2020-07-21 17:08:23.762793

"""
import json
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, update, select
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = 'c766962faf4f'
down_revision = 'de2e74456ef3'
branch_labels = None
depends_on = None


def gen_id():
    return str(uuid.uuid4())


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'tag',
        sa.Column('id', sa.String(length=36), nullable=False),
        sa.Column('resource_id', sa.String(36), nullable=False),
        sa.Column('key', sa.String(256), nullable=False),
        sa.Column('value', sa.String(256), nullable=False),
        sa.ForeignKeyConstraint(['resource_id'], ['resource.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id')
    )
    bind = op.get_bind()
    session = Session(bind=bind)
    table_ = table('resource',
                   column('id', sa.String(36)),
                   column('tags', sa.TEXT()))
    select_stmt = select(
        [table_.c.id, table_.c.tags]
    ).where(table_.c.tags != "{}")
    result = session.execute(select_stmt)
    new_tags = []
    for id_, tags in result:
        try:
            value = json.loads(tags)
            for k, v in value.items():
                new_tags.append({
                    'id': gen_id(), 'resource_id': id_,
                    'key': k, 'value': v
                })
        except Exception:
            pass
    table_ = table(
        'tag',
        column('id', sa.String(36)),
        column('resource_id', sa.String(36)),
        column('key', sa.String(256)),
        column('value', sa.String(256))
    )
    chunk_size = 200
    for i in range(0, len(new_tags), chunk_size):
        op.bulk_insert(table_, new_tags[i:i + chunk_size])

    try:
        session.commit()
    finally:
        session.close()
    op.drop_column('resource', 'tags')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('resource', sa.Column('tags', sa.TEXT(), nullable=False))
    table_ = table(
        'tag',
        column('id', sa.String(36)),
        column('resource_id', sa.String(36)),
        column('key', sa.String(256)),
        column('value', sa.String(256))
    )
    bind = op.get_bind()
    session = Session(bind=bind)
    select_stmt = select(
        [table_.c.resource_id, table_.c.key, table_.c.value]
    )
    resource_tags = {}
    result = session.execute(select_stmt)
    for res_id, key, value in result:
        if res_id not in resource_tags:
            resource_tags[res_id] = {}
        resource_tags[res_id][key] = value
    table_ = table('resource',
                   column('id', sa.String(36)),
                   column('tags', sa.TEXT()))
    for res_id in resource_tags:
        try:
            upd_stmt = update(
                table_
            ).values(
                tags=json.dumps(resource_tags[res_id])
            ).where(table_.c.id == res_id)
            session.execute(upd_stmt)
            session.commit()
        finally:
            session.close()
    try:
        upd_stmt = update(table_).values(
            tags='{}').where(table_.c.tags == "")
        session.execute(upd_stmt)
        session.commit()
    finally:
        session.close()
    op.drop_table('tag')
    # ### end Alembic commands ###
