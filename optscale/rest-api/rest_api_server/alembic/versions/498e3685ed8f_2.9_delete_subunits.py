""""2.9 delete subunits"

Revision ID: 498e3685ed8f
Revises: eb0dbf95b83d
Create Date: 2020-09-08 00:15:12.484236

"""
import datetime
import uuid
from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, delete, insert, select
from sqlalchemy.orm import Session


# revision identifiers, used by Alembic.
revision = '498e3685ed8f'
down_revision = 'eb0dbf95b83d'
branch_labels = None
depends_on = None


def gen_id():
    return str(uuid.uuid4())


def delete_all_subunits(session):
    org_table = table('organization',
                      column('id', sa.String(36)),
                      column('parent_id', sa.String(36)))
    delete_stmt = delete(org_table).where(org_table.c.parent_id.isnot(None))
    session.execute(delete_stmt)


def create_subunits_by_budgets(session):
    org_table = table('organization',
                      column('id', sa.String(36)),
                      column('name', sa.String(256)),
                      column('email', sa.String(256)),
                      column('deleted_at', sa.Integer),
                      column('budget_id', sa.String(36)),
                      column('created_at', sa.Integer),
                      column('parent_id', sa.String(36)),
                      column('tags', sa.TEXT)
                      )
    select_stmt = select([org_table.c.budget_id, org_table.c.id])
    result = session.execute(select_stmt)
    budget_id_bu_id_map = {budget_id: bu_id for budget_id, bu_id in result}
    budget_table = table(
        'budget',
        column('id', sa.String(36)),
        column('deleted_at', sa.Integer),
        column('parent_id', sa.String(36)),
        column('name', sa.String(256)),
    )
    select_stmt = select([budget_table.c.id, budget_table.c.name,
                          budget_table.c.deleted_at, budget_table.c.parent_id])
    budgets = session.execute(select_stmt).fetchall()
    for id_, name, deleted_at, parent_id in budgets:
        if parent_id is not None:
            budget_id_bu_id_map[id_] = gen_id()
    now = int(datetime.datetime.utcnow().timestamp())
    for id_, name, deleted_at, parent_id in budgets:
        if parent_id is not None:
            insert_stmt = insert(org_table).values(
                id=budget_id_bu_id_map.get(id_),
                name=name,
                email=None,
                deleted_at=deleted_at,
                budget_id=id_,
                created_at=now,
                parent_id=budget_id_bu_id_map.get(parent_id),
                tags='{}'
            )
            session.execute(insert_stmt)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    rest_session = Session(bind=bind)
    op.drop_constraint('organization_organization_fk', 'organization',
                       type_='foreignkey')
    delete_all_subunits(rest_session)
    try:
        rest_session.commit()
    finally:
        rest_session.close()
    op.drop_column('organization', 'email')
    op.drop_column('organization', 'parent_id')
    op.drop_column('organization', 'tags')
    op.drop_column('employee', 'tags')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('organization',
                  sa.Column('parent_id', sa.String(length=36), nullable=True))
    op.add_column('organization',
                  sa.Column('email', sa.String(length=256), nullable=True))
    op.add_column('organization',
                  sa.Column('tags', sa.TEXT(), nullable=False, default='{}'))
    op.add_column('employee',
                  sa.Column('tags', sa.TEXT(), nullable=False, default='{}'))
    bind = op.get_bind()
    rest_session = Session(bind=bind)
    create_subunits_by_budgets(rest_session)
    try:
        rest_session.commit()
    finally:
        rest_session.close()
    op.create_foreign_key(
        'organization_organization_fk', 'organization', 'organization',
        ['parent_id'], ['id'])
    # ### end Alembic commands ###
