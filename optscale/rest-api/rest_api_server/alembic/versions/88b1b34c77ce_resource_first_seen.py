""""resource_first_seen"

Revision ID: 88b1b34c77ce
Revises: 3e151b9b5920
Create Date: 2021-01-11 10:39:22.850663

"""
import os
from datetime import datetime
from pymongo import MongoClient, UpdateOne
from config_client.client import Client as EtcdClient

# revision identifiers, used by Alembic.
revision = '88b1b34c77ce'
down_revision = '3e151b9b5920'
branch_labels = None
depends_on = None
DEFAULT_ETCD_HOST = 'etcd-client'
DEFAULT_ETCD_PORT = 80
BULK_SIZE = 1000


def _get_etcd_config_client():
    etcd_host = os.environ.get('HX_ETCD_HOST', DEFAULT_ETCD_HOST)
    etcd_port = os.environ.get('HX_ETCD_PORT', DEFAULT_ETCD_PORT)
    config_cl = EtcdClient(host=etcd_host, port=int(etcd_port))
    return config_cl


def _get_mongo_client():
    config_cl = _get_etcd_config_client()
    mongo_params = config_cl.mongo_params()
    mongo_conn_string = "mongodb://%s:%s@%s:%s" % mongo_params[:-1]
    mongo_client = MongoClient(mongo_conn_string)
    return mongo_client


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    mongo_cl = _get_mongo_client()
    resources_collection = mongo_cl.restapi.resources
    expenses_collection = mongo_cl.restapi.expenses
    resource_ids = list(map(lambda x: x['_id'],
                            resources_collection.find({}, [])))
    for i in range(0, len(resource_ids), BULK_SIZE):
        bulk_ids = resource_ids[i:i + BULK_SIZE]
        res_fs = expenses_collection.aggregate([
            {
                '$match': {
                    '$and': [
                        {'resource_id': {'$in': bulk_ids}},
                        {'_initial': {'$ne': True}}
                    ]
                }
            },
            {
                '$group': {
                    '_id': '$resource_id',
                    'first_seen': {"$min": "$date"},
                }
            }
        ])
        first_seen_map = {
            r['_id']: int(r['first_seen'].timestamp()) for r in res_fs
        }
        resource_created_at_map = {
            r['_id']: r['created_at']
            for r in resources_collection.find(
                {'_id': {'$in': [
                    r_id for r_id in bulk_ids if
                    r_id not in first_seen_map.keys()
                ]}}
            )
        }
        now = int(datetime.utcnow().timestamp())
        updates = []
        for r_id in bulk_ids:
            first_seen = first_seen_map.get(r_id)
            if not first_seen:
                first_seen = resource_created_at_map.get(r_id, now)
            updates.append(
                UpdateOne(
                    filter={
                        '_id': r_id
                    },
                    update={'$set': {
                        'first_seen': first_seen
                    }}
                )
            )
        if updates:
            resources_collection.bulk_write(updates)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    mongo_cl = _get_mongo_client()
    resources_collection = mongo_cl.restapi.resources
    resources_collection.update_many(
        filter={},
        update={'$unset': {'first_seen': 1}}
    )
    # ### end Alembic commands ###
