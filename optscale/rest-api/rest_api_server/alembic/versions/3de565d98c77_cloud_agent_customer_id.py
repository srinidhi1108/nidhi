""""cloud_agent_customer_id"

Revision ID: 3de565d98c77
Revises: 6944b4218027
Create Date: 2018-08-27 15:07:35.806429

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.orm import Session
from sqlalchemy.sql import table, column
from sqlalchemy import update, String, select, Boolean

# revision identifiers, used by Alembic.
revision = '3de565d98c77'
down_revision = '6944b4218027'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('cloud_agent', sa.Column('customer_id', sa.String(length=36),
                                           nullable=False))
    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        cloud_table = table(
            'cloud',
            column('id', String())
        )
        stmt = select([cloud_table])
        clouds = session.execute(stmt)
        cloud_agent_table = table(
            'cloud_agent',
            column('id', String()),
            column('cloud_id', String()),
            column('customer_id', String())
        )
        customer_table = table(
            'customer', column('id', String()),
            column('cloud_id', String())
        )
        for cloud in clouds:
            stmt = select([customer_table]).where(
                customer_table.c.cloud_id == cloud['id'])
            customer_id = session.execute(stmt).scalar()
            if customer_id:
                upd_customer_id = update(cloud_agent_table).values(
                    customer_id=customer_id).where(
                    cloud_agent_table.c.cloud_id == cloud['id'])
                session.execute(upd_customer_id)
        stmt = select([customer_table]).where(
            customer_table.c.cloud_id.is_(None))
        customer_id = session.execute(stmt).scalar()
        upd_customer_id = update(cloud_agent_table).values(
            customer_id=customer_id).where(
            cloud_agent_table.c.customer_id == '')
        session.execute(upd_customer_id)
        session.commit()
    finally:
        session.close()
    op.drop_constraint('cloud_agent_ibfk_1', 'cloud_agent', type_='foreignkey')
    op.drop_index('uc_cloud_id_api_url_deleted_at', table_name='cloud_agent')
    op.drop_column('cloud_agent', 'cloud_id')
    op.create_unique_constraint(
        'uc_customer_id_api_url_deleted_at', 'cloud_agent',
        ['customer_id', 'api_url', 'deleted_at'])
    op.create_foreign_key('cloud_agent_ibfk_1', 'cloud_agent', 'customer',
                          ['customer_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('cloud_agent', sa.Column('cloud_id', sa.String(length=36),
                                           nullable=False))

    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        cloud_table = table(
            'cloud',
            column('id', String()),
            column('default', Boolean)
        )
        stmt = select([cloud_table])
        clouds = session.execute(stmt)
        cloud_agent_table = table(
            'cloud_agent',
            column('id', String()),
            column('customer_id', String()),
            column('cloud_id', String())
        )
        customer_table = table(
            'customer', column('id', String()),
            column('cloud_id', String())
        )
        for cloud in clouds:
            stmt = select([customer_table]).where(
                customer_table.c.cloud_id == cloud['id'])
            customers = session.execute(stmt)
            for customer in customers:
                upd_customer_id = update(cloud_agent_table).values(
                    cloud_id=cloud['id']).where(
                    cloud_agent_table.c.customer_id == customer['id'])
                session.execute(upd_customer_id)
        stmt = select([cloud_table]).where(
            cloud_table.c.default == True,
        )
        cloud_id = session.execute(stmt).scalar()
        upd_cloud_id = update(cloud_agent_table).values(
            cloud_id=cloud_id).where(
            cloud_agent_table.c.cloud_id == '')
        session.execute(upd_cloud_id)
        session.commit()
    finally:
        session.close()
    op.drop_constraint('cloud_agent_ibfk_1', 'cloud_agent', type_='foreignkey')
    op.drop_index('uc_customer_id_api_url_deleted_at',
                  table_name='cloud_agent')
    op.drop_column('cloud_agent', 'customer_id')

    op.create_unique_constraint(
        'uc_cloud_id_api_url_deleted_at', 'cloud_agent',
        ['cloud_id', 'api_url', 'deleted_at'])
    op.create_foreign_key('cloud_agent_ibfk_1', 'cloud_agent', 'cloud',
                          ['cloud_id'], ['id'])
    # ### end Alembic commands ###
